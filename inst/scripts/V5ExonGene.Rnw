%\VignetteIndexEntry{05 - Exon ST and Gene ST Arrays}
%\VignetteKeywords{gene, exon, affymetrix, rma}
%\VignettePackage{oligo}

\documentclass[12pt, letterpaper]{article}

%% Standard header
\input{header.in}

%% Location of the figures

%% Sweave stuff
\SweaveOpts{eps=FALSE}

\title{Preprocessing Affymetrix Exon ST and Gene ST Arrays}
\author{Benilton S. Carvalho}
\date{}

\begin{document}

%% Initializating the R environment
<<<setup, echo=FALSE, results=hide>>=
options(prompt="R> ",  continue=" ", width=70, device=pdf)
@  

\maketitle

This document summarizes the RMA workflow for Affymetrix Gene ST and
Affymetrix Exon ST arrays.

\section{Loading the package}

To use the tools provided by the \Rpackage{oligo} package, the user must
load it.

<<load>>=
library(oligo)
@ 

\section{Importing data}
\label{sec:import}

To minimize the risks of running into issues with the location of the
CEL files, we recommend the user to start by creating variables that
contain the fully qualified CEL file names of interest.

As an example, suppose the CEL files corresponding to the Exon arrays
are located in a directory called
\Robject{\~{}/exonExperiment}. Similarly, assume that the CEL files
associated to the Gene ST array are located in
\Robject{\~{}/geneExperiment}. Then, using the \Rfunction{list.celfiles}
function, the user can obtain the fully qualified names for the CEL files.

<<celFiles, eval=FALSE>>=
exonCELs <- list.celfiles('~/exonExperiment', full.names=TRUE)
geneCELs <- list.celfiles('~/geneExperiment', full.names=TRUE)
@ 

With the \Rpackage{oligo} package, the user is able to read CEL files
directly through the \Rfunction{read.celfiles} function.

<<fs, eval=FALSE>>=
affyExonFS <- read.celfiles(exonCELs)
affyGeneFS <- read.celfiles(geneCELs)
@ 

\textbf{NOTE: } Readers who do not have their own data but are still
interested in following this vignette can obtain the
\Robject{affyExonFS} and \Robject{affyGeneFS} objects above through the
\Rpackage{oligoData} package, as shown below:

<<pkg>>=
library(oligoData)
data(affyExonFS)
affyExonFS
data(affyGeneFS)
affyGeneFS
@ 

\section{RMA - probeset level}
\label{sec:rmaprobeset}

Both designs allow the user to obtain summaries at the probeset
level. To proceed with RMA at this level, the user should set the
\Robject{target} argument to \Robject{'probeset'}.

<<rmaPS>>=
exonPS <- rma(affyExonFS, target='probeset')
genePS <- rma(affyGeneFS, target='probeset')
@ 

\section{RMA - transcript level}
\label{sec:rmatranscript}

Summaries at the transcript level are also available. For Exon arrays,
there are three possible options for transcript level summarization:
\textbf{core}, \textbf{full} and \textbf{extended}. For Gene arrays,
only summaries for \textbf{core} probesets is available.

<<rmaTS>>=
exonCore <- rma(affyExonFS, target='core')
exonFull <- rma(affyExonFS, target='full')
exonExtd <- rma(affyExonFS, target='extended')
geneCore <- rma(affyGeneFS, target='core')
@ 

\section{Retrieving NetAffx Biological Annotation}
\label{sec:netaffx}

Biological annotation can be obtained with the \Rfunction{getNetAffx}
function. It will return an \Rclass{AnnotatedDataFrame} object, which
can be used as \Robject{featureData} slot on the objects returned by
\Rmethod{rma}. Users interested in further details about the fields
available on this object should consult the Affymetrix documentation for
annotation files.

<<netaffx>>=
featureData(exonPS) <- getNetAffx(exonPS, 'probeset')
featureData(genePS) <- getNetAffx(genePS, 'probeset')
featureData(exonCore) <- getNetAffx(exonCore, 'transcript')
featureData(exonFull) <- getNetAffx(exonFull, 'transcript')
featureData(exonExtd) <- getNetAffx(exonExtd, 'transcript')
featureData(geneCore) <- getNetAffx(geneCore, 'transcript')
@ 

The user can have an overview of the object by using its name:

<<viewExon>>=
exonCore
@ 

The biological annotation made available through NetAffx is now stored
in the \Robject{featureData} slot.

<<fdataExonCore>>=
featureData(exonCore)
varLabels(featureData(exonCore))
@ 

As an example, the gene assignment for the 2 first metaprobesets (core)
can be obtained as follows:

<<first10>>=
pData(featureData(exonCore))[1:2, 'geneassignment']
@ 

The same strategy can be applied to any of the other objects.

\section{Session Information}

<<si>>=
sessionInfo()
@ 
\end{document}
